package xyz.proteanbear.libra.framework;

import xyz.proteanbear.libra.utils.StringUtils;
import org.quartz.*;

/**
 * Task configuration.
 *
 * @author ProteanBear
 */
public class TaskConfigBean
{
    /**
     * 时间间隔类型
     */
    public enum IntervalType
    {
        SECOND,MINUTE,HOUR
    }

    /**
     * The main key.</br>
     * Generated by default using uuid.
     */
    private String taskId=StringUtils.uuid();

    /**
     * Class corresponding to the task key
     */
    private String taskKey;

    /**
     * The status of the task, 0 disabled or 1 enabled
     */
    private int taskStatus=1;

    /**
     * Task timing settings
     */
    private String taskCron;

    /**
     * Task data map
     */
    private final JobDataMap jobDataMap=new JobDataMap();

    /**
     * Task interval timing settings,valid only when `taskCron` is null.
     */
    private Integer taskInterval;

    /**
     * Task interval type.
     */
    private IntervalType taskIntervalType=IntervalType.HOUR;

    /**
     * Task interval repeat count,-1 is infinite loop.
     */
    private Integer taskIntervalRepeat=-1;

    /**
     * Get the current task configuration time rule settings
     *
     * @return scheduleBuilder
     */
    public ScheduleBuilder scheduleBuilder() throws SchedulerException
    {
        //Cron
        if(StringUtils.isNotBlank(taskCron))
        {
            return CronScheduleBuilder.cronSchedule(taskCron);
        }
        //Simple
        ScheduleBuilder result=null;
        if(taskInterval==null)
        {
            throw new SchedulerException("Timing settings must not be null!");
        }
        switch(taskIntervalType)
        {
            case SECOND:
                result=SimpleScheduleBuilder.simpleSchedule()
                        .withIntervalInSeconds(taskInterval)
                        .withRepeatCount(taskIntervalRepeat);
                break;
            case MINUTE:
                result=SimpleScheduleBuilder.simpleSchedule()
                        .withIntervalInMinutes(taskInterval)
                        .withRepeatCount(taskIntervalRepeat);
                break;
            case HOUR:
                result=SimpleScheduleBuilder.simpleSchedule()
                        .withIntervalInHours(taskInterval)
                        .withRepeatCount(taskIntervalRepeat);
        }
        return result;
    }

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId=taskId;
    }

    public String getTaskKey()
    {
        return taskKey;
    }

    public void setTaskKey(String taskKey)
    {
        this.taskKey=taskKey;
    }

    public int getTaskStatus()
    {
        return taskStatus;
    }

    public void setTaskStatus(int taskStatus)
    {
        this.taskStatus=taskStatus;
    }

    public String getTaskCron()
    {
        return taskCron;
    }

    public void setTaskCron(String taskCron)
    {
        this.taskCron=taskCron;
    }

    public JobDataMap getJobDataMap()
    {
        return jobDataMap;
    }

    public Integer getTaskInterval()
    {
        return taskInterval;
    }

    public void setTaskInterval(Integer taskInterval)
    {
        this.taskInterval=taskInterval;
    }

    public IntervalType getTaskIntervalType()
    {
        return taskIntervalType;
    }

    public void setTaskIntervalType(IntervalType taskIntervalType)
    {
        this.taskIntervalType=taskIntervalType;
    }

    public Integer getTaskIntervalRepeat()
    {
        return taskIntervalRepeat;
    }

    public void setTaskIntervalRepeat(Integer taskIntervalRepeat)
    {
        this.taskIntervalRepeat=taskIntervalRepeat;
    }
}